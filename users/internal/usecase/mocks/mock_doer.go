// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JieeiroSst/itjob/users/internal/usecase (interfaces: UserUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/JieeiroSst/itjob/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// FindAllUser mocks base method.
func (m *MockUserUsecase) FindAllUser() (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUser")
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUser indicates an expected call of FindAllUser.
func (mr *MockUserUsecaseMockRecorder) FindAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUser", reflect.TypeOf((*MockUserUsecase)(nil).FindAllUser))
}

// LockAccount mocks base method.
func (m *MockUserUsecase) LockAccount(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockUserUsecaseMockRecorder) LockAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockUserUsecase)(nil).LockAccount), arg0)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(arg0 model.Users) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0)
}

// RequestIpComputer mocks base method.
func (m *MockUserUsecase) RequestIpComputer(arg0 model.Ip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestIpComputer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestIpComputer indicates an expected call of RequestIpComputer.
func (mr *MockUserUsecaseMockRecorder) RequestIpComputer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestIpComputer", reflect.TypeOf((*MockUserUsecase)(nil).RequestIpComputer), arg0)
}

// SignUp mocks base method.
func (m *MockUserUsecase) SignUp(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserUsecaseMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserUsecase)(nil).SignUp), arg0)
}

// UpdateProfile mocks base method.
func (m *MockUserUsecase) UpdateProfile(arg0 int, arg1 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUsecaseMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUsecase)(nil).UpdateProfile), arg0, arg1)
}
