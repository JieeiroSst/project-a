// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JieeiroSst/itjob/users/internal/db (interfaces: UserDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/JieeiroSst/itjob/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserDB is a mock of UserDB interface.
type MockUserDB struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBMockRecorder
}

// MockUserDBMockRecorder is the mock recorder for MockUserDB.
type MockUserDBMockRecorder struct {
	mock *MockUserDB
}

// NewMockUserDB creates a new mock instance.
func NewMockUserDB(ctrl *gomock.Controller) *MockUserDB {
	mock := &MockUserDB{ctrl: ctrl}
	mock.recorder = &MockUserDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDB) EXPECT() *MockUserDBMockRecorder {
	return m.recorder
}

// CheckAccount mocks base method.
func (m *MockUserDB) CheckAccount(arg0 model.Users) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckAccount indicates an expected call of CheckAccount.
func (mr *MockUserDBMockRecorder) CheckAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccount", reflect.TypeOf((*MockUserDB)(nil).CheckAccount), arg0)
}

// CheckAccountExists mocks base method.
func (m *MockUserDB) CheckAccountExists(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccountExists indicates an expected call of CheckAccountExists.
func (mr *MockUserDBMockRecorder) CheckAccountExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountExists", reflect.TypeOf((*MockUserDB)(nil).CheckAccountExists), arg0)
}

// CreateAccount mocks base method.
func (m *MockUserDB) CreateAccount(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUserDBMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUserDB)(nil).CreateAccount), arg0)
}

// FindAllUser mocks base method.
func (m *MockUserDB) FindAllUser() (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUser")
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUser indicates an expected call of FindAllUser.
func (mr *MockUserDBMockRecorder) FindAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUser", reflect.TypeOf((*MockUserDB)(nil).FindAllUser))
}

// LockAccount mocks base method.
func (m *MockUserDB) LockAccount(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockUserDBMockRecorder) LockAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockUserDB)(nil).LockAccount), arg0)
}

// RequestIpComputer mocks base method.
func (m *MockUserDB) RequestIpComputer(arg0 model.Ip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestIpComputer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestIpComputer indicates an expected call of RequestIpComputer.
func (mr *MockUserDBMockRecorder) RequestIpComputer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestIpComputer", reflect.TypeOf((*MockUserDB)(nil).RequestIpComputer), arg0)
}

// UpdateProfile mocks base method.
func (m *MockUserDB) UpdateProfile(arg0 int, arg1 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserDBMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserDB)(nil).UpdateProfile), arg0, arg1)
}
