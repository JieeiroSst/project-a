// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JieeiroSst/itjob/users/internal/repository (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/JieeiroSst/itjob/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckAccount mocks base method.
func (m *MockUserRepository) CheckAccount(arg0 model.Users) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckAccount indicates an expected call of CheckAccount.
func (mr *MockUserRepositoryMockRecorder) CheckAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccount", reflect.TypeOf((*MockUserRepository)(nil).CheckAccount), arg0)
}

// CheckAccountExists mocks base method.
func (m *MockUserRepository) CheckAccountExists(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccountExists indicates an expected call of CheckAccountExists.
func (mr *MockUserRepositoryMockRecorder) CheckAccountExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountExists", reflect.TypeOf((*MockUserRepository)(nil).CheckAccountExists), arg0)
}

// CheckEmail mocks base method.
func (m *MockUserRepository) CheckEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockUserRepositoryMockRecorder) CheckEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckEmail), arg0)
}

// CheckIP mocks base method.
func (m *MockUserRepository) CheckIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIP indicates an expected call of CheckIP.
func (mr *MockUserRepositoryMockRecorder) CheckIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIP", reflect.TypeOf((*MockUserRepository)(nil).CheckIP), arg0)
}

// CheckPassword mocks base method.
func (m *MockUserRepository) CheckPassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockUserRepositoryMockRecorder) CheckPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockUserRepository)(nil).CheckPassword), arg0)
}

// CreateAccount mocks base method.
func (m *MockUserRepository) CreateAccount(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUserRepositoryMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUserRepository)(nil).CreateAccount), arg0)
}

// FindAllUser mocks base method.
func (m *MockUserRepository) FindAllUser() (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUser")
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUser indicates an expected call of FindAllUser.
func (mr *MockUserRepositoryMockRecorder) FindAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUser", reflect.TypeOf((*MockUserRepository)(nil).FindAllUser))
}

// LockAccount mocks base method.
func (m *MockUserRepository) LockAccount(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockUserRepositoryMockRecorder) LockAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockUserRepository)(nil).LockAccount), arg0)
}

// RequestIpComputer mocks base method.
func (m *MockUserRepository) RequestIpComputer(arg0 model.Ip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestIpComputer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestIpComputer indicates an expected call of RequestIpComputer.
func (mr *MockUserRepositoryMockRecorder) RequestIpComputer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestIpComputer", reflect.TypeOf((*MockUserRepository)(nil).RequestIpComputer), arg0)
}

// UpdateProfile mocks base method.
func (m *MockUserRepository) UpdateProfile(arg0 int, arg1 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserRepositoryMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserRepository)(nil).UpdateProfile), arg0, arg1)
}
